VERILOG CODE
32 BIT ALU 
module alu_32(oss,remainder,a,b,count,sel
    );
	outputreg [63:0]oss;
	outputreg [31:0]remainder;
	input [31:0]a,b;
	input [5:0]count;
	input [3:0]sel;
	 wire [32:0]s,d,qo,rem,r_shift,l_shift,r_rotate,l_rotate;
wire [63:0]o;
	 adder_32 g1(a,b,s);
	 subtractor_32 g2(a,b,d);
	 multiplier_32 g3(o,a,b);
	 division_32 g4(qo,rem,a,b);
	right_shiftg5(r_shift,a,count);
	left_shiftg6(l_shift,a,count);
	right_rotateg7(r_rotate,a,count);
	left_rotateg8(l_rotate,a,count);
	
always@*
begin
if(sel==4'd0)
begin
oss[31:0] = s[31:0];
oss[63:32]=0;
end
else if(sel==4'd1)
begin
oss[31:0] = d[31:0];
oss[63:32]=0;
end
else if(sel==4'd2)
begin
oss[63:0] =o[63:0];   
end
else if(sel==4'd3)
begin
oss[31:0] = qo[31:0];
oss[63:32]=0;
remainder[31:0] = rem[31:0];  
end
if(sel==4'd4)
begin
oss[31:0] = r_shift[31:0];
oss[63:32]=0;				
end
else if(sel==4'd5)
begin
oss[31:0] = l_shift[31:0];
oss[63:32]=0;				
end
else if(sel==4'd6)
begin
oss[31:0] = r_rotate[31:0];
oss[63:32]=0;				
end
else if(sel==4'd7)
begin
oss[31:0] = l_rotate[31:0]; 
oss [63:32]=0;				
end
else if(sel==4'd8)
begin
oss[31:0] = a&b;
oss[63:32]=0;				
end
else if(sel==4'd9)
begin
oss[31:0] = a|b;
oss[63:32]=0;				
end
else if(sel==4'd10)
begin
oss[31:0] = ~(a&b);
oss[63:32]=0;				
end
else if(sel==4'd11)
begin
oss[31:0] = ~(a|b);  
end
else if(sel==4'd12)
begin
oss[31:0] = (a^b);
oss[63:32]=0;				
end
else if(sel==4'd13)
begin
oss[31:0] = ~(a^b);
oss[63:32]=0;				
end
else
begin
oss [31:0] = ~a;
oss[63:32]=0;				
end
end
endmodule






32 BIT ALU TEST BENCH
module tb_alu_32;

	// Inputs
	reg [31:0] a;
	reg [31:0] b;
	reg [5:0] count;
	reg [3:0] sel;

	// Outputs
	wire [63:0] oss;
	wire [31:0] remainder;

	// Instantiate the Unit Under Test (UUT)
	alu_32uut (
		.oss(oss), 
		.remainder(remainder), 
		.a(a), 
		.b(b), 
		.count(count), 
		.sel(sel)
	);

	initial begin
		// Initialize Inputs
		a = 0;
		b = 0;
		count = 0;
		sel = 0;

		// Wait 100 ns for global reset to finish
		#100 a=32'd1111;b=32'd2222;sel=4'd0;
        #100 sel=4'd1;
		  #100 sel=4'd2;
		  #100 sel=4'd3;
		  #100 sel=4'd4;
		  #100 sel=4'd5;
		  #100 sel=4'd6;
		  #100 sel=4'd7;
		  #100 sel=4'd8;
		  #100 sel=4'd9;
		  #100 sel=4'd10;
		  #100 sel=4'd11;
		  #100 sel=4'd12;
		  #100 sel=4'd13;
		  #100 sel=4'd15;
		
		// Add stimulus here
end

endmodule



32 BIT ADDER
module adder_32(a,b,s
    );
	input [31:0]a,b;
	output [32:0]s;
	wire [30:0]c;
	 HA g1(a[0],b[0],s[0],c[0]);
	 FA g2(a[1],b[1],c[0],s[1],c[1]);
	 FA g3(a[2],b[2],c[1],s[2],c[2]);
	 FA g4(a[3],b[3],c[2],s[3],c[3]);
	 FA g5(a[4],b[4],c[3],s[4],c[4]);
	 FA g6(a[5],b[5],c[4],s[5],c[5]);
	 FA g7(a[6],b[6],c[5],s[6],c[6]);
	 FA g8(a[7],b[7],c[6],s[7],c[7]);
	 FA g9(a[8],b[8],c[7],s[8],c[8]);
	 FA g10(a[9],b[9],c[8],s[9],c[9]);
	 FA g11(a[10],b[10],c[9],s[10],c[10]);
	 FA g12(a[11],b[11],c[10],s[11],c[11]);
	 FA g13(a[12],b[12],c[11],s[12],c[12]);
	 FA g14(a[13],b[13],c[12],s[13],c[13]);
	 FA g15(a[14],b[14],c[13],s[14],c[14]);
	 FA g16(a[15],b[15],c[14],s[15],c[15]);
	 FA g17(a[16],b[16],c[15],s[16],c[16]);
	 FA g18(a[17],b[17],c[16],s[17],c[17]);
	 FA g19(a[18],b[18],c[17],s[18],c[18]);
	 FA g20(a[19],b[19],c[18],s[19],c[19]);
	 FA g21(a[20],b[20],c[19],s[20],c[20]);
	 FA g22(a[21],b[21],c[20],s[21],c[21]);
	 FA g23(a[22],b[22],c[21],s[22],c[22]);
	 FA g24(a[23],b[23],c[22],s[23],c[23]);
	 FA g25(a[24],b[24],c[23],s[24],c[24]);
	 FA g26(a[25],b[25],c[24],s[25],c[25]);
	 FA g27(a[26],b[26],c[25],s[26],c[26]);
	 FA g28(a[27],b[27],c[26],s[27],c[27]);
	 FA g29(a[28],b[28],c[27],s[28],c[28]);
	 FA g30(a[29],b[29],c[28],s[29],c[29]);
	 FA g31(a[30],b[30],c[29],s[30],c[30]);
	 FA g32(a[31],b[31],c[30],s[31],s[32]);
	
endmodule

32 BIT SUBTRACTOR
module subtractor_32(a,b,d
    );
	input [31:0]a,b;
	output [32:0]d;
	wire [30:0]c;
	 HS g1(a[0],b[0],d[0],c[0]);
	 FS g2(a[1],b[1],c[0],d[1],c[1]);
	 FS g3(a[2],b[2],c[1],d[2],c[2]);
	 FS g4(a[3],b[3],c[2],d[3],c[3]);
	 FS g5(a[4],b[4],c[3],d[4],c[4]);
	 FS g6(a[5],b[5],c[4],d[5],c[5]);
	 FS g7(a[6],b[6],c[5],d[6],c[6]);
	 FS g8(a[7],b[7],c[6],d[7],c[7]);
	 FS g9(a[8],b[8],c[7],d[8],c[8]);
	 FS g10(a[9],b[9],c[8],d[9],c[9]);
	 FS g11(a[10],b[10],c[9],d[10],c[10]);
	 FS g12(a[11],b[11],c[10],d[11],c[11]);
	 FS g13(a[12],b[12],c[11],d[12],c[12]);
	 FS g14(a[13],b[13],c[12],d[13],c[13]);
	 FS g15(a[14],b[14],c[13],d[14],c[14]);
	 FS g16(a[15],b[15],c[14],d[15],c[15]);
	 FS g17(a[16],b[16],c[15],d[16],c[16]);
	 FS g18(a[17],b[17],c[16],d[17],c[17]);
	 FS g19(a[18],b[18],c[17],d[18],c[18]);
	 FS g20(a[19],b[19],c[18],d[19],c[19]);
	 FS g21(a[20],b[20],c[19],d[20],c[20]);
	 FS g22(a[21],b[21],c[20],d[21],c[21]);
	 FS g23(a[22],b[22],c[21],d[22],c[22]);
	 FS g24(a[23],b[23],c[22],d[23],c[23]);
	 FS g25(a[24],b[24],c[23],d[24],c[24]);
	 FS g26(a[25],b[25],c[24],d[25],c[25]);
	 FS g27(a[26],b[26],c[25],d[26],c[26]);
	 FS g28(a[27],b[27],c[26],d[27],c[27]);
	 FS g29(a[28],b[28],c[27],d[28],c[28]);
	 FS g30(a[29],b[29],c[28],d[29],c[29]);
	 FS g31(a[30],b[30],c[29],d[30],c[30]);
	 FS g32(a[31],b[31],c[30],d[31],d[32]);
	
endmodule

32 BIT DIVISION
module division_32(
	outputreg [31:0] qo,rem, input [31:0] q,m
	);

	
reg [31:0]a1,b1;
reg [31:0]p1;
integer i;
always @(q or m)
begin
a1=q;
b1=m;
p1=0;
for(i=0;i<32;i=i+1)
begin
if(p1[31]==1)
begin
p1={p1[30:0],a1[31]};
p1=p1+b1;
end
else
p1={p1[30:0],a1[31]};
a1[31:1]=a1[30:0];
p1=p1-b1;
if(p1[31]==1)
begin
a1[0]=0;
end
else
a1[0]=1;
if(p1[31]==1)
begin
p1=p1+b1;
qo=a1;
rem=p1;
end
else
qo=a1;
rem=p1;
end
end
endmodule

N BIT RIGHT SHIFT
moduleright_shift(rightshift,j,count);
outputreg [31:0] rightshift;
input [31:0] j;
input [5:0] count;
	integer i=0,q=0,p=0;
always@(count)
begin
for(p=0;p<6;p=p+1)
q=q+((2**p)*count[p]);
assignrightshift = j>>q;
end
endmodule

N BIT LEFT SHIFT

moduleleft_shift(leftshift,j,count);
outputreg [31:0] leftshift;
input [31:0] j;
input [5:0] count;
	integer i=0,q=0,p=0;

always@(count)
begin

for(p=0;p<6;p=p+1)
q=q+((2**p)*count[p]);
assignleftshift = j<<q;
end
endmodule

N BIT RIGHT ROTATE
moduleright_rotate(rrotate,j,count
    );
	outputreg [31:0] rrotate;
input [31:0] j;
input [5:0] count;
	integer q=0,p=0,i;

always@(count)
begin
for(p=0;p<6;p=p+1)
q=q+((2**p)*count[p]);
i=32-q;
assignrrotate =j>>q|j<<i;
end

endmodule

N BIT LEFT ROTATE
moduleleft_rotate(lrotate,j,count
    );
	outputreg [31:0] lrotate;
input [31:0] j;
input [5:0] count;
	integer q=0,p=0,i;

always@(count)
begin
for(p=0;p<6;p=p+1)
q=q+((2**p)*count[p]);
i=32-q;
assignlrotate =j<<q|j>>i;
end
endmodule
32 BIT MULTIPLIER
module multiplier_32(
    input [31:0] m,Q,
    output [63:0] z
    );
wire [31:0]A_out1;
wire [32:0]Q_out1;


wire [31:0]A_out2;
wire [32:0]Q_out2;


wire [31:0]A_out3;
wire [32:0]Q_out3;



wire [31:0]A_out4;
wire [32:0]Q_out4;


wire [31:0]A_out5;
wire [32:0]Q_out5;



wire [31:0]A_out6;
wire [32:0]Q_out6;



wire [31:0]A_out7;
wire [32:0]Q_out7;



wire [31:0]A_out8;
wire [32:0]Q_out8;

wire [31:0]A_out9;
wire [32:0]Q_out9;


wire [31:0]A_out10;
wire [32:0]Q_out10;


wire [31:0]A_out11;
wire [32:0]Q_out11;



wire [31:0]A_out12;
wire [32:0]Q_out12;


wire [31:0]A_out13;
wire [32:0]Q_out13;



wire [31:0]A_out14;
wire [32:0]Q_out14;



wire [31:0]A_out15;
wire [32:0]Q_out15;



wire [31:0]A_out16;
wire [32:0]Q_out16;

wire [31:0]A_out17;
wire [32:0]Q_out17;


wire [31:0]A_out18;
wire [32:0]Q_out18;


wire [31:0]A_out19;
wire [32:0]Q_out19;



wire [31:0]A_out20;
wire [32:0]Q_out20;


wire [31:0]A_out21;
wire [32:0]Q_out21;



wire [31:0]A_out22;
wire [32:0]Q_out22;



wire [31:0]A_out23;
wire [32:0]Q_out23;



wire [31:0]A_out24;
wire [32:0]Q_out24;

wire [31:0]A_out25;
wire [32:0]Q_out25;


wire [31:0]A_out26;
wire [32:0]Q_out26;


wire [31:0]A_out27;
wire [32:0]Q_out27;



wire [31:0]A_out28;
wire [32:0]Q_out28;


wire [31:0]A_out29;
wire [32:0]Q_out29;



wire [31:0]A_out30;
wire [32:0]Q_out30;



wire [31:0]A_out31;
wire [32:0]Q_out31;



wire [31:0]A_out32;
wire [32:0]Q_out32;

boothsub32x32 b1(
.A_in(32'b00000000000000000000000000000000),
.A_out(A_out1),
.Q_in({Q,1'b0}),
.Q_out(Q_out1),
.m(m)
);

boothsub32x32 b2(
.A_in(A_out1),
.A_out(A_out2),
.Q_in(Q_out1),
.Q_out(Q_out2),
.m(m)
);


boothsub32x32 b3(
.A_in(A_out2),
.A_out(A_out3),
.Q_in(Q_out2),
.Q_out(Q_out3),
.m(m)
);

boothsub32x32 b4(
.A_in(A_out3),
.A_out(A_out4),
.Q_in(Q_out3),
.Q_out(Q_out4),
.m(m)
);


boothsub32x32 b5(
.A_in(A_out4),
.A_out(A_out5),
.Q_in(Q_out4),
.Q_out(Q_out5),
.m(m)
);

boothsub32x32 b6(
.A_in(A_out5),
.A_out(A_out6),
.Q_in(Q_out5),
.Q_out(Q_out6),
.m(m)
);

boothsub32x32 b7(
.A_in(A_out6),
.A_out(A_out7),
.Q_in(Q_out6),
.Q_out(Q_out7),
.m(m)
);

boothsub32x32 b8(
.A_in(A_out7),
.A_out(A_out8),
.Q_in(Q_out7),
.Q_out(Q_out8),
.m(m)
);

boothsub32x32 b9(
.A_in(A_out8),
.A_out(A_out9),
.Q_in(Q_out8),
.Q_out(Q_out9),
.m(m)
);

boothsub32x32 b10(
.A_in(A_out9),
.A_out(A_out10),
.Q_in(Q_out9),
.Q_out(Q_out10),
.m(m)
);


boothsub32x32 b11(
.A_in(A_out10),
.A_out(A_out11),
.Q_in(Q_out10),
.Q_out(Q_out11),
.m(m)
);

boothsub32x32 b12(
.A_in(A_out11),
.A_out(A_out12),
.Q_in(Q_out11),
.Q_out(Q_out12),
.m(m)
);


boothsub32x32 b13(
.A_in(A_out12),
.A_out(A_out13),
.Q_in(Q_out12),
.Q_out(Q_out13),
.m(m)
);

boothsub32x32 b14(
.A_in(A_out13),
.A_out(A_out14),
.Q_in(Q_out13),
.Q_out(Q_out14),
.m(m)
);

boothsub32x32 b15(
.A_in(A_out14),
.A_out(A_out15),
.Q_in(Q_out14),
.Q_out(Q_out15),
.m(m)
);

boothsub32x32 b16(
.A_in(A_out15),
.A_out(A_out16),
.Q_in(Q_out15),
.Q_out(Q_out16),
.m(m)
);


boothsub32x32 b17(
.A_in(A_out16),
.A_out(A_out17),
.Q_in(Q_out16),
.Q_out(Q_out17),
.m(m)
);

boothsub32x32 b18(
.A_in(A_out17),
.A_out(A_out18),
.Q_in(Q_out17),
.Q_out(Q_out18),
.m(m)
);


boothsub32x32 b19(
.A_in(A_out18),
.A_out(A_out19),
.Q_in(Q_out18),
.Q_out(Q_out19),
.m(m)
);

boothsub32x32 b20(
.A_in(A_out19),
.A_out(A_out20),
.Q_in(Q_out19),
.Q_out(Q_out20),
.m(m)
);


boothsub32x32 b21(
.A_in(A_out20),
.A_out(A_out21),
.Q_in(Q_out20),
.Q_out(Q_out21),
.m(m)
);

boothsub32x32 b22(
.A_in(A_out21),
.A_out(A_out22),
.Q_in(Q_out21),
.Q_out(Q_out22),
.m(m)
);

boothsub32x32 b23(
.A_in(A_out22),
.A_out(A_out23),
.Q_in(Q_out22),
.Q_out(Q_out23),
.m(m)
);

boothsub32x32 b24(
.A_in(A_out23),
.A_out(A_out24),
.Q_in(Q_out23),
.Q_out(Q_out24),
.m(m)
);

boothsub32x32 b25(
.A_in(A_out24),
.A_out(A_out25),
.Q_in(Q_out24),
.Q_out(Q_out25),
.m(m)
);

boothsub32x32 b26(
.A_in(A_out25),
.A_out(A_out26),
.Q_in(Q_out25),
.Q_out(Q_out26),
.m(m)
);


boothsub32x32 b27(
.A_in(A_out26),
.A_out(A_out27),
.Q_in(Q_out26),
.Q_out(Q_out27),
.m(m)
);

boothsub32x32 b28(
.A_in(A_out27),
.A_out(A_out28),
.Q_in(Q_out27),
.Q_out(Q_out28),
.m(m)
);


boothsub32x32 b29(
.A_in(A_out28),
.A_out(A_out29),
.Q_in(Q_out28),
.Q_out(Q_out29),
.m(m)
);

boothsub32x32 b30(
.A_in(A_out29),
.A_out(A_out30),
.Q_in(Q_out29),
.Q_out(Q_out30),
.m(m)
);

boothsub32x32 b31(
.A_in(A_out30),
.A_out(A_out31),
.Q_in(Q_out30),
.Q_out(Q_out31),
.m(m)
);

boothsub32x32 b32(
.A_in(A_out31),
.A_out(A_out32),
.Q_in(Q_out31),
.Q_out(Q_out32),
.m(m)
);

assign z={A_out32,Q_out32[32:1]};


endmodule


module boothsub32x32(
    input [31:0] A_in,
    output reg[31:0] A_out,
    input [32:0] Q_in,
    output reg[32:0] Q_out,
    input [31:0] m
    );
reg [31:0]A_temp;
reg [32:0]Q_temp;

wire [31:0]A_sum=A_in+m;
wire [32:0]A_sub=A_in+ ~m + 1;

always @(A_in,m,Q_in,A_sum,A_sub)
begin
case (Q_in[1:0])
2'b00,2'b11: begin
             A_temp={A_in[31],A_in[31:1]};
 Q_temp={A_in[0],Q_in[32:1]};
 end
2'b01:       begin  
             A_temp={A_sum[31],A_sum[31:1]};
 Q_temp={A_sum[0],Q_in[32:1]};
             end
2'b10:       begin  
             A_temp={A_sub[31],A_sub[32:1]};
 Q_temp={A_sub[0],Q_in[32:1]};
             end
 endcase 
 A_out=A_temp;
 Q_out=Q_temp; 
 
end
endmodule
